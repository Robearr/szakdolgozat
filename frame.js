const Definitions = require('./definitions/playwright.js');
const TestFailedError = require('./errors/TestFailedError.js');

const failTestIfShould = (result) => {
  if (!result) {
    throw new TestFailedError();
  }
};

/**
 * L√©trehoz egy √∫j b√∂ng√©sz≈ë instance-ot.
 * NEM kell megv√°rni!
*/
function CREATE_BROWSER() {
  Definitions.CREATE_BROWSER();
}

/**
 * Bez√°rja a l√©trehozott instance-ot.
 * NEM kell megv√°rni!
 */
function CLOSE_BROWSER() {
  Definitions.CLOSE_BROWSER();
}

/**
 * Megl√°togatja a POST body-ban kapott url-t
 * @param {string} url - A megl√°togatand√≥ url
 */
async function VISIT(url) {
  return Definitions.VISIT(url);
}

/**
 * A megadott id≈ëre lefagyasztja a tesztel√©st
 * @param {number} timeout - ms-ben megadott megv√°rand√≥ id≈ë
 * @returns {Promise} - megv√°rand√≥ v√°rakoz√°s
 */
function WAIT(timeout) {
  return Definitions.WAIT(timeout);
}

/**
 * Feliratkozik a console-ba t√∂rt√©n≈ë √≠r√°s esem√©nyekre, √©s a kapott √ºzenet t√∂mb-b≈ël kiszedegeti az eddig console-ra √≠rt √ºzeneteket.
 * A teszt sikeres, ha a t√∂mb az END_WATCH_CONSOLE h√≠v√°s sor√°n √ºres.
 * @param  {string[]} messagesToWatch - Egy t√∂mbnyi √ºzenet, aminek a jelenl√©t√©t figyeli.
 * @returns {Promise}
 */
function WATCH_CONSOLE(messagesToWatch) {
  return Definitions.WATCH_CONSOLE(messagesToWatch);
}

/**
 * Eld√∂nti, hogy sikeres volt-e a WATCH_CONSOLE teszt.
 * @throws TestFailedError
 * @returns {Promise}
 */
function END_WATCH_CONSOLE() {
  return Definitions.END_WATCH_CONSOLE();
}

const INPUT = {
  /**
   * Egy leg√∂rd√ºl≈ë list√°b√≥l kiv√°lasztja a megadott opci√≥t
   * @param {Element} elem - A select tag
   * @param {string} value - A kiv√°lasztand√≥ option tag
   * @returns {Promise} - megv√°rand√≥ kiv√°laszt√°s
   */
  SELECT: Definitions.INPUT.SELECT,
  /**
   * Egy vagy t√∂bb megadott checkbox k√∂z√ºl kiv√°lasztja az adott `value` √©rt√©k≈±t.
   * Megjel√∂l√©s √©s jel√∂l√©s elv√©tel√©re is alkalmas.
   * @param {Element[]|Element} elems - A checkbox(ok)
   * @param {string} value - A checkboxok k√∂z√ºl a kiv√°lasztand√≥ `value`-ja
   * @returns {Promise} - megv√°rand√≥ kiv√°laszt√°s
   */
  CHECK: Definitions.INPUT.CHECK,
  /**
   * A megadott input tag-be bele√≠rja a szint√©n megadott √©rt√©ket
   * A SET_VALUE generikusabb! Ez csak text inputra m≈±k√∂dik!
   * @param {Element} elem - Az input tag
   * @param {string} value - A be√≠rand√≥ √©rt√©k
   * @returns {Promise} - megv√°rand√≥ be√≠r√°s
   */
  WRITE: Definitions.INPUT.WRITE,

  /**
   * Egy sokkal generikusabb WRITE, ami minden `value` attrib√∫tummal rendelkez≈ë tag-re m≈±k√∂dik.
   * @param {string|Element} elem - Az elem, aminek az `value` attrib√∫tum√°t szeretn√©nk be√°ll√≠tani, vagy a selector, ami ezt az elemet jel√∂li.
   * @param {any} value - az √©rt√©k, amire be szeretn√©nk √°ll√≠tani
   * @returns {Promise} - megv√°rand√≥ be√≠r√°s
   */
  SET_VALUE: Definitions.INPUT.SET_VALUE
};

const GET = {
  /**
   * Visszaad egy html elemet
   * @param {string} selector - A selector, ami alapj√°n kiv√°lasztja az elemet
   * @returns {Promise} - megv√°rand√≥ elem
   */
  ONE: Definitions.GET.ONE,
  /**
   * Visszaad t√∂bb html elemet
   * @param {string} selector - A selector, ami alapj√°n kiv√°lasztja az elemeket
   * @returns {Promise} - megv√°rand√≥ elemek
   */
  MANY: Definitions.GET.MANY,
  /**
   * Visszaadja egy elem adott attrib√∫tum√°t
   * @param {Element} elem - Az elem, amin az attrib√∫tumot keress√ºk
   * @param {string} attribute - Az attrib√∫tum neve
   * @returns {Promise} - megv√°rand√≥ attrib√∫tum
   */
  ATTRIBUTE: Definitions.GET.ATTRIBUTE,
};

/**
 * Egy megadott element v√©grehajtja az adott esem√©nyt.
 * @param {Element} elem - Az elem, amin az esem√©ny meg lesz h√≠vva
 * @param {string} ev - Az esem√©ny neve
 * @returns Az esem√©ny promise
 */
function DISPATCH(elem, ev) {
  return Definitions.DISPATCH(elem, ev);
}

const ASSERT = {
  /**
   * Eld√∂nti k√©t elemr≈ël, hogy egyenl≈ëek-e.
   * Ezek lehetnek kor√°bban GET-elt elemek, vagy m√°s, primit√≠v v√°ltoz√≥k is
   * @param {any} elem1
   * @param {any} elem2
   * @throws TestFailedError
   * @returns {boolean}
   */
  EQUALS: (elem1, elem2) => {
    console.log('üëÄ Ellen≈ërz√©s hogy a k√©t √©rt√©k EGYENL≈ê-e');
    let result;
    if (Array.isArray(elem1)) {
      if (Array.isArray(elem2)) {
        result = elem2.every((item) => elem1.includes(item));
      } else {
        result = elem1.every((item) => item === elem2);
      }
    } else if (Array.isArray(elem2)) {
      result = elem2.every((item) => item === elem1);
    } else if (typeof elem1 === 'object' && typeof elem2 === 'object') {
      result = Object.keys(elem1).every(
        (item) => Object.keys(elem2).includes(item) && elem1[item] === elem2[item]
      );
    }

    result = result || elem1 === elem2;

    failTestIfShould(result);
    return result;
  },
  /**
   * Eld√∂nti a megadott √©rt√©kr≈ël, hogy igaz-e
   * Ez lehet b√°rmi, amib≈ël lehet truthy √©rt√©ket csin√°lni
   * @param {any} item - az √©rt√©k, aminek igazs√°g√°t el kell d√∂nteni
   * @throws TestFailedError
   * @returns {boolean}
   */
  TRUE: (item) => {
    console.log('üëÄ Ellen≈ërz√©s, hogy az √©rt√©k IGAZ-e');
    const result = !!item;

    failTestIfShould(result);
    return result;
  },
  /**
   * Eld√∂nti a megadott √©rt√©kr≈ël, hogy hamis-e
   * Ez lehet b√°rmi, amib≈ël lehet falsey √©rt√©ket csin√°lni
   * @param {any} item - az √©rt√©k, aminek hamiss√°g√°t el kell d√∂nteni
   * @throws TestFailedError
   * @returns {boolean}
   */
  FALSE: (item) => {
    console.log('üëÄ Ellen≈ërz√©s, hogy az √©rt√©k HAMIS-e');
    const result = !item;
    failTestIfShould(!result);
    return !item;
  },
  /**
   * Eld√∂nti a megadott √©rt√©kr≈ël, hogy l√©tezik-e
   * String eset√©n html selector-k√©nt √©rtelmez≈ëdik √©s az Element l√©tez√©s√©t d√∂nti el
   * @param {Element|Array|Object|string} item - az √©rt√©k, aminek l√©tez√©s√©t el kell d√∂nteni
   * @throws TestFailedError
   * @returns {boolean}
   */
  EXISTS: async (item) => {
    console.log('üëÄ Ellen≈ërz√©s, hogy az √©rt√©k L√âTEZIK-e');
    let result;

    if (Array.isArray(item)) {
      result = !!item.length;
    }
    if (typeof item === 'object') {
      result = !!Object.keys(item).length;
    }
    if (typeof item === 'string') {
      result = await Definitions.ASSERT.EXISTS(item);
    }

    failTestIfShould(result);
    return result;
  },
  /**
   * Eld√∂nti, hogy az adott elemnek l√©tezik-e az adott attrib√∫tuma
   * @param {Element} elem - Az elem, amin keresni kell az attrib√∫tumot
   * @param {string} attr - A keresend≈ë attrb√∫tum
   * @throws TestFailedError
   * @returns {boolean}
   */
  HAS_ATTRIBUTE: async (elem, attr) => {
    console.log('üëÄ Ellen≈ërz√©s, hogy az √©rt√©k attrib√∫tuma L√âTEZIK-e');
    const result = await Definitions.ASSERT.HAS_ATTRIBUTE(elem, attr);

    failTestIfShould(result);
    return result;
  },
  /**
   * Eld√∂nti, hogy az adott elemen l√©v≈ë attrib√∫tum egyenl≈ë-e az √©rt√©kkel
   * @param {Element} elem - Az elem, amin van az attrib√∫tum
   * @param {string} attr - A vizsg√°land√≥ attrib√∫tum
   * @param {string} value - Az √©rt√©k
   * @throws TestFailedError
   * @returns {boolean}
   */
  ATTRIBUTE_EQUALS: async (elem, attr, value) => {
    console.log(`üëÄ Ellen≈ërz√©s, hogy az √©rt√©k attrib√∫tuma EGYENL≈ê-e ${value}-val`);
    const result =  await Definitions.ASSERT.ATTRIBUTE_EQUALS(elem, attr, value);

    failTestIfShould(result);
    return result;
  },
  /**
   * Eld√∂nti, hogy az adott kifejez√©s dobott-e hib√°t
   * @param {any} expression - A kifejez√©s, ami dobhat hib√°t
   * @throws TestFailedError
   * @returns {boolean}
   */
  THROWS: (expression) => {
    if (!expression) {
      return false;
    }

    return Promise.resolve(expression).then(
      () => {
        return false;
      }
    ).catch(
      () => {
        failTestIfShould(true);
        return true;
      }
    );
  },
  /**
   * A megadott f√ºggv√©nyt megkeresi n√©v alapj√°n, √©s a param√©terekkel v√©grehajtja, majd ellen≈ërzi, hogy egyenl≈ë-e a megadott eredm√©nnyel.
   * @param {any} result - a f√ºggv√©ny eredm√©nye, amivel egyenl≈ënek kell lennie
   * @param {string} functionName - a f√ºggv√©ny neve
   * @param {...any} parameters - a f√ºggv√©ny param√©terei
   */
  FUNCTION_RETURNS: async (result, functionName, ...parameters) => {
    console.log(`üëÄ Ellen≈ërz√©s, hogy a ${functionName}(${parameters}) EGYENL≈ê-e ${result}-val`);
    const functionResult = await Definitions.ASSERT.FUNCTION_RETURNS(functionName, ...parameters);
    return ASSERT.EQUALS(result, functionResult);
  }
};

module.exports = {
  CREATE_BROWSER,
  CLOSE_BROWSER,
  VISIT,
  WAIT,
  WATCH_CONSOLE,
  END_WATCH_CONSOLE,
  INPUT,
  GET,
  DISPATCH,
  ASSERT,
};
